// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.1 clang-703.0.29)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import MediaPlayer;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class MobilePlayerViewController;
@class NSBundle;
@class NSCoder;


/// A view controller used for presenting views on top of player content. Meant to be subclassed.
SWIFT_CLASS("_TtC12MobilePlayer33MobilePlayerOverlayViewController")
@interface MobilePlayerOverlayViewController : UIViewController

/// The MobilePlayerViewController instance that the overlay is being shown by. It's value is nil if the overlay is not being shown at the time this property is accessed.
@property (nonatomic, readonly, strong) MobilePlayerViewController * _Nullable mobilePlayer;

/// Causes the view controller's view to be removed from on top of player content if it is being displayed.
- (void)dismiss;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;


/// A view controller for playing media content.
SWIFT_CLASS("_TtC12MobilePlayer26MobilePlayerViewController")
@interface MobilePlayerViewController : MPMoviePlayerViewController

/// A localized string that represents the video this controller manages. Setting a value will update the title label in the user interface if one exists.
@property (nonatomic, copy) NSString * _Nullable title;

/// Returns a player initialized from data in a given unarchiver. globalConfig is used for configuration in this case. In most cases the other intializer should be used.
///
/// \param coder An unarchiver object.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;

/// Called after the controller's view is loaded into memory.
///
/// This method is called after the view controller has loaded its view hierarchy into memory. This method is
/// called regardless of whether the view hierarchy was loaded from a nib file or created programmatically in the
/// <code>loadView
/// </code> method. You usually override this method to perform additional initialization on views that were
/// loaded from nib files.
///
/// If you override this method make sure you call super's implementation.
- (void)viewDidLoad;

/// Called to notify the view controller that its view is about to layout its subviews.
///
/// When a view's bounds change, the view adjusts the position of its subviews. Your view controller can override
/// this method to make changes before the view lays out its subviews.
///
/// The default implementation of this method sets the frame of the controls view.
- (void)viewWillLayoutSubviews;

/// Notifies the view controller that its view is about to be added to a view hierarchy.
///
/// If <code>true
/// </code>, the view is being added to the window using an animation.
///
/// The default implementation of this method hides the status bar.
///
/// <ul><li>parameters:</li><li>animated: If <code>true
/// </code>, the view is being added to the window using an animation.</li></ul>
- (void)viewWillAppear:(BOOL)animated;

/// Notifies the view controller that its view is about to be removed from a view hierarchy.
///
/// If <code>true
/// </code>, the disappearance of the view is being animated.
///
/// The default implementation of this method stops playback and restores status bar appearance to how it was before
/// the view appeared.
///
/// <ul><li>parameters:</li><li>animated: If <code>true
/// </code>, the disappearance of the view is being animated.</li></ul>
- (void)viewWillDisappear:(BOOL)animated;

/// Indicates whether content should begin playback automatically.
///
/// The default value of this property is true. This property determines whether the playback of network-based
/// content begins automatically when there is enough buffered data to ensure uninterrupted playback.
@property (nonatomic) BOOL shouldAutoplay;

/// Initiates playback of current content.
///
/// Starting playback causes dismiss to be called on prerollViewController, pauseOverlayViewController
/// and postrollViewController.
- (void)play;

/// Pauses playback of current content.
///
/// Pausing playback causes pauseOverlayViewController to be shown.
- (void)pause;

/// Ends playback of current content.
- (void)stop;

/// Makes playback content fit into player's view.
- (void)fitVideo;

/// Makes playback content fill player's view.
- (void)fillVideo;

/// Makes playback content switch between fill/fit modes when content area is double tapped. Overriding this method is recommended if you want to change this behavior.
- (void)handleContentDoubleTap;

/// An array of activity items that will be used for presenting a UIActivityViewController when the action button is pressed (if it exists). If content is playing, it is paused automatically at presentation and will continue after the controller is dismissed. Override showContentActions() if you want to change the button's behavior.
@property (nonatomic, copy) NSArray * _Nullable activityItems;

/// Method that is called when a control interface button with identifier "action" is tapped. Presents a UIActivityViewController with activityItems set as its activity items. If content is playing, it is paused automatically at presentation and will continue after the controller is dismissed. Overriding this method is recommended if you want to change this behavior.
///
/// parameters:
///
/// <ul><li>sourceView: On iPads the activity view controller is presented as a popover and a source view needs to
/// provided or a crash will occur.</li></ul>
- (void)showContentActions:(UIView * _Nullable)sourceView;

/// Indicates if player controls are hidden. Setting its value will animate controls in or out.
@property (nonatomic) BOOL controlsHidden;

/// Returns the view associated with given player control element identifier.
///
/// \param identifier Element identifier.
///
/// \returns  View or nil if element is not found.
- (UIView * _Nullable)getViewForElementWithIdentifier:(NSString * _Nonnull)identifier;

/// Hides/shows controls when content area is tapped once. Overriding this method is recommended if you want to change this behavior.
- (void)handleContentTap;

/// The MobilePlayerOverlayViewController that will be presented on top of the player content at start. If a controller is set then content will not start playing automatically even if shouldAutoplay is true. The controller will dismiss if user presses the play button or play() is called.
@property (nonatomic, readonly, strong) MobilePlayerOverlayViewController * _Nullable prerollViewController;

/// The MobilePlayerOverlayViewController that will be presented on top of the player content whenever playback is paused. Does not include pauses in playback due to buffering.
@property (nonatomic, readonly, strong) MobilePlayerOverlayViewController * _Nullable pauseOverlayViewController;

/// The MobilePlayerOverlayViewController that will be presented on top of the player content when playback finishes.
@property (nonatomic, readonly, strong) MobilePlayerOverlayViewController * _Nullable postrollViewController;

/// Dismisses all currently presented overlay view controllers and clears any timed overlays.
- (void)clearOverlays;
@end


@interface MobilePlayerViewController (SWIFT_EXTENSION(MobilePlayer))
@end


@interface MobilePlayerViewController (SWIFT_EXTENSION(MobilePlayer))
@end


@interface NSTimer (SWIFT_EXTENSION(MobilePlayer))
@end


@interface UIColor (SWIFT_EXTENSION(MobilePlayer))
@end


@interface UIControl (SWIFT_EXTENSION(MobilePlayer))
@end


@interface UIGestureRecognizer (SWIFT_EXTENSION(MobilePlayer))
@end


@interface UIImage (SWIFT_EXTENSION(MobilePlayer))
@end

#pragma clang diagnostic pop
